#ifndef SCALARCONVERTER_HPP
# define SCALARCONVERTER_HPP

# include <string>
# include <iostream>
# include <limits.h>

# define FLOAT_MIN -340282346638528859811704183484516925440.0000000000000000
# define FLOAT_MAX 340282346638528859811704183484516925440.0000000000000000

# define DOUBLE_MIN -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0000000000000000
# define DOUBLE_MAX 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0000000000000000

enum Pattern {
    INT,
    CHAR,
    FLOAT,
    DOUBLE,
    NANS,
    INF,
};

class ScalarConverter {
private:
    ScalarConverter() {};
    ScalarConverter(const ScalarConverter &other){ (void)other; };
    ~ScalarConverter() {};

    ScalarConverter& operator=(const ScalarConverter& other) { (void)other; return (*this); };

public:
    static void convert(std::string input);
};


#endif
