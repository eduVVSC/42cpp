Erradas: 4 (1/2), 5, 9 (1/2), 15(1/2), 17(1/2) , 7(1/4), 12(1/3), 16

Nota final: 1
1 - 2 e 3

2 - 1

3 - 1

4 - 1 (ou 3)  => correto era 1 e 3

5 - 1  (acho que o chat ta errado)

6 - 2

7 - falta na resposta (3/4)
class HealthCare{
    private Doctor doctor;
    private Address address;

    public HealthCare(Doctor doctor, Address address){
        this.doctor = doctor;
        this.address = address;
    }
}

8 - 

    public Doctor getDoctor(){
        return doctor;
    }

9 - 1 (ou 3) ==> correto era 1 e 3 

10 - 3 

11 - 3 -> none of this, will be "1, 2, 3, then the exception"

12 - (2/3)
public void xpto(L i s t <Objeto> o b j e t o s, String colorName )
{
    Color color = Color.valueOf(colorName);
    for (Objeto o : objetos)
    {
        if (color.equals(color));
            System.out.println(o.toString());
    }
}

13 - 3 

14 - 1 ==> acertei: new FileOutputStream -> new ObjectOutputStream -> writeObject!

15 - 3 ==> correto seria 1 e 3

16 -  (1/3)
public class Box<T extends Object> {
private T object ;

public void set ( T object ) {
    this.object = object ;
}

public T get ( ) {
    return object ;
}
public s t a t i c void main ( S t r i n g [ ] a r g s ) {
    Box type = new Box ( ) ;
    type.set("String");
    System.out.println(type.get()) ;
    Box type1 = new Box();
    Integer i = 100;
    type1.set( i ) ;
    System.out.println(type1.get());
}

}

17 - 3 ou 4? ==> correto 3 e 4!

18 -

void switchToSecondary(){
Stage stage = new Stage();

scene = new Scene (App.class.getResource("secondary.fxml" ).load(), 240, 180) ;

stage.setTitle("Secondary View");
stage.setScene (scene.setRoot(new FXMLLoader(App.class.getResource("secondary.fxml").load)));
stage.show();
}


Erros:
1- nao ver que nas questoes podiase colocar mais de uma resposta (3 questoes!)

2- Definicao de metodos como Static, ele corta a relacao de heranca para ponteiros,
ja que sao definidos em tempo de compilacao, logo como a variavel tem o nome A, executara 
seu metodo estatico

3- exception, ao declarar uma exception personalizada, essa pode ser subclasse de 
checked ou unchecked, diferenca entre elas esta na obrigatoriedade de serem checadas,
as checked exceptions sao as que o programa da erro de compilacao, ja as unchecked 
nao.

4- A definicao de composicao e agragacao nao tem impacto na escritura do codigo,
a <>- b, o atributo da classe A vai ser  private B b.

5- Para obter um enum apartir de uma string(essa deve ter seus caracteres em maiusculo)
deve-se usar o metodo ENUM.valueOf(STRING);

6- Metodos com templates, esse metodos podem receber qualquer tipo de classe, desde que
estejam de acordo com a predefinicao do generico(? extends Tal, ou T),e a partir disso 
fazem as operacoes comums. 
Quando algum objeto for ser mandado para a classe, tem de sempre se especificar qual 
o tipo do Objeto esta sendo enviado
(Box<Integer> tp = new Box<>(100))
(Box<String> tp = new Box<>("string"))

7- 
